// Code generated by protoc-gen-go.
// source: iot.proto
// DO NOT EDIT!

/*
Package iot is a generated protocol buffer package.

It is generated from these files:
	iot.proto

It has these top-level messages:
	MetricRequest
	Metric
	MetricResponse
*/
package iot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricRequest struct {
	Id        int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Timestamp int64     `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Metric    []*Metric `protobuf:"bytes,4,rep,name=metric" json:"metric,omitempty"`
}

func (m *MetricRequest) Reset()                    { *m = MetricRequest{} }
func (m *MetricRequest) String() string            { return proto.CompactTextString(m) }
func (*MetricRequest) ProtoMessage()               {}
func (*MetricRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetricRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MetricRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MetricRequest) GetMetric() []*Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

type Metric struct {
	Id    int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type  string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Value float64 `protobuf:"fixed64,4,opt,name=value" json:"value,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Metric) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MetricResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *MetricResponse) Reset()                    { *m = MetricResponse{} }
func (m *MetricResponse) String() string            { return proto.CompactTextString(m) }
func (*MetricResponse) ProtoMessage()               {}
func (*MetricResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MetricResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*MetricRequest)(nil), "MetricRequest")
	proto.RegisterType((*Metric)(nil), "Metric")
	proto.RegisterType((*MetricResponse)(nil), "MetricResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metrics service

type MetricsClient interface {
	// Sends a greeting
	SendMetric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) SendMetric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := grpc.Invoke(ctx, "/Metrics/SendMetric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metrics service

type MetricsServer interface {
	// Sends a greeting
	SendMetric(context.Context, *MetricRequest) (*MetricResponse, error)
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_SendMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).SendMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Metrics/SendMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).SendMetric(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMetric",
			Handler:    _Metrics_SendMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot.proto",
}

func init() { proto.RegisterFile("iot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x4b, 0x05, 0x21,
	0x14, 0x85, 0x73, 0xc6, 0x66, 0xf0, 0x46, 0x2f, 0xb8, 0xb4, 0x90, 0x08, 0x12, 0x57, 0xd2, 0xc2,
	0xe0, 0xb5, 0xeb, 0x3f, 0xb4, 0x31, 0x68, 0x6f, 0xcd, 0x25, 0x84, 0x1c, 0x6d, 0xf4, 0x05, 0xfd,
	0xfb, 0xc0, 0x79, 0x43, 0xbc, 0x5d, 0xbb, 0x7b, 0x0e, 0x87, 0xf3, 0xe9, 0x01, 0x11, 0x52, 0xb5,
	0x79, 0x49, 0x35, 0xe9, 0x05, 0x2e, 0x9f, 0xa9, 0x2e, 0xe1, 0xdd, 0xd1, 0xd7, 0x81, 0x4a, 0xc5,
	0x1d, 0x74, 0x61, 0x92, 0x4c, 0x31, 0xd3, 0xbb, 0x2e, 0x4c, 0x88, 0xc0, 0x67, 0x1f, 0x49, 0x76,
	0x8a, 0x19, 0xe1, 0xda, 0x8d, 0xb7, 0x20, 0x6a, 0x88, 0x54, 0xaa, 0x8f, 0x59, 0xf6, 0x2d, 0xfa,
	0x67, 0xe0, 0x1d, 0x0c, 0xb1, 0x55, 0x4a, 0xae, 0x7a, 0x73, 0xb1, 0x1f, 0xed, 0x91, 0x70, 0xb4,
	0xf5, 0x2b, 0x0c, 0xab, 0xf3, 0x2f, 0x18, 0x02, 0xaf, 0x3f, 0x99, 0x1a, 0x47, 0xb8, 0x76, 0xe3,
	0x35, 0x9c, 0x7f, 0xfb, 0xcf, 0x03, 0x49, 0xae, 0x98, 0x61, 0x6e, 0x15, 0xfa, 0x1e, 0x76, 0xdb,
	0x5f, 0x4a, 0x4e, 0x73, 0x21, 0x94, 0x30, 0x46, 0x2a, 0xc5, 0x7f, 0x50, 0x83, 0x08, 0xb7, 0xc9,
	0xfd, 0x13, 0x8c, 0x6b, 0xb6, 0xe0, 0x03, 0xc0, 0x0b, 0xcd, 0xd3, 0xf6, 0x24, 0x7b, 0xb2, 0xc7,
	0xcd, 0x95, 0x3d, 0xed, 0xd4, 0x67, 0x6f, 0x43, 0x9b, 0xee, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x32, 0xfe, 0x83, 0xb1, 0x47, 0x01, 0x00, 0x00,
}
